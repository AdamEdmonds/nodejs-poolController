var reqString = path.join(process.cwd(), '/src/lib/controllers/pump-controller-middleware.js')
var pumpControllerMiddleWare = require(reqString)
var myModule = rewire(reqString)


describe('pump controller', function() {


    describe('#test various parameters sent to pumpCommandSaveSpeed', function() {
        var tempRewire;
        before(function() {
            sandbox = sinon.sandbox.create()

            var extractFunction = 'exports.pumpCommandSaveSpeed = ' + pumpControllerMiddleWare('whatever').pumpCommandSaveSpeed.toString() + '\r\n\r\n exports.pumpAddressToIndex = ' + pumpControllerMiddleWare('whatever').pumpAddressToIndex.toString() + '\r\n\r\n exports.pumpIndexToAddress = ' + pumpControllerMiddleWare('whatever').pumpIndexToAddress.toString()

            //Following is needed for Istanbul coverage.  It doesn't like 'toString()' functions.
            //per https://github.com/gotwarlost/istanbul/issues/310
            extractFunction = extractFunction.replace(/__cov_(.+?)\+\+[,;]?/g, '')
            //write the function to a temporary file
            fs.writeFileSync(__dirname + '/dynamic/temp.js', extractFunction, 'utf8')
            tempRewire = rewire(__dirname + '/dynamic/temp.js')
        });

        afterEach(function() {
            //restore the sandbox after each function
            sandbox.restore()
        })

        after(function() {
            //and finally delete the temp file.  Should be put in afterEach() testing function
            //fs.unlinkSync(__dirname + '/dynamic/temp.js')
        })


        it('sets pump 1 program 1 to 1000 rpm', function() {

            var loggerStub = sandbox.stub().returns()
            var setPumpToRemoteControlStub = sandbox.stub().returns()
            var saveProgramOnPumpStub = sandbox.stub().returns()
            var endPumpCommandStub = sandbox.stub().returns()

            tempRewire.__with__({

                'container': {
                    'settings': {
                        'logApi': true
                    },
                    'pumpController': {
                        'setPumpToRemoteControl': setPumpToRemoteControlStub,
                        'saveProgramOnPump': saveProgramOnPumpStub,
                        'endPumpCommand': endPumpCommandStub
                    }
                },
                'logger': {
                    'verbose': loggerStub,
                    'warn': loggerStub
                }


            })(function() {

                var index = 1
                var program = 1
                var speed = 1000
                tempRewire.pumpCommandSaveSpeed(index, program, speed)
                saveProgramOnPumpStub.args[0][0].should.eq(tempRewire.pumpIndexToAddress(index))
                saveProgramOnPumpStub.args[0][1].should.eq(program)
                saveProgramOnPumpStub.args[0][2].should.eq(speed)
                var loggerOutput = loggerStub.args[0][0].replace('%s', loggerStub.args[0][1])
                loggerOutput = loggerOutput.replace('%s', loggerStub.args[0][2])
                loggerOutput = loggerOutput.replace('%s', loggerStub.args[0][3])
                loggerOutput = loggerOutput.replace('%s', loggerStub.args[0][4])
                return loggerOutput.should.eq('User request to save pump ' + index + ' (address ' + tempRewire.pumpIndexToAddress(index) + ') to Program ' + program + ' as ' + speed + ' RPM')

            });
        });

        it('sets pump 1 program 2 to 2000 rpm', function() {

            var loggerStub = sandbox.stub().returns()
            var setPumpToRemoteControlStub = sandbox.stub().returns()
            var saveProgramOnPumpStub = sandbox.stub().returns()
            var endPumpCommandStub = sandbox.stub().returns()

            tempRewire.__with__({

                'container': {
                    'settings': {
                        'logApi': true
                    },
                    'pumpController': {
                        'setPumpToRemoteControl': setPumpToRemoteControlStub,
                        'saveProgramOnPump': saveProgramOnPumpStub,
                        'endPumpCommand': endPumpCommandStub
                    }
                },
                'logger': {
                    'verbose': loggerStub,
                    'warn': loggerStub
                }


            })(function() {

                var index = 1
                var program = 2
                var speed = 1000
                tempRewire.pumpCommandSaveSpeed(index, program, speed)
                saveProgramOnPumpStub.args[0][0].should.eq(tempRewire.pumpIndexToAddress(index))
                saveProgramOnPumpStub.args[0][1].should.eq(program)
                saveProgramOnPumpStub.args[0][2].should.eq(speed)
                var loggerOutput = loggerStub.args[0][0].replace('%s', loggerStub.args[0][1])
                loggerOutput = loggerOutput.replace('%s', loggerStub.args[0][2])
                loggerOutput = loggerOutput.replace('%s', loggerStub.args[0][3])
                loggerOutput = loggerOutput.replace('%s', loggerStub.args[0][4])
                return loggerOutput.should.eq('User request to save pump ' + index + ' (address ' + tempRewire.pumpIndexToAddress(index) + ') to Program ' + program + ' as ' + speed + ' RPM')

            });

        });
        it('sets pump 2 program 3 to 500 rpm', function() {

            var loggerStub = sandbox.stub().returns()
            var setPumpToRemoteControlStub = sandbox.stub().returns()
            var saveProgramOnPumpStub = sandbox.stub().returns()
            var endPumpCommandStub = sandbox.stub().returns()

            tempRewire.__with__({

                'container': {
                    'settings': {
                        'logApi': true
                    },
                    'pumpController': {
                        'setPumpToRemoteControl': setPumpToRemoteControlStub,
                        'saveProgramOnPump': saveProgramOnPumpStub,
                        'endPumpCommand': endPumpCommandStub
                    }
                },
                'logger': {
                    'verbose': loggerStub,
                    'warn': loggerStub
                }


            })(function() {

                var index = 2
                var program = 3
                var speed = 500
                tempRewire.pumpCommandSaveSpeed(index, program, speed)
                saveProgramOnPumpStub.args[0][0].should.eq(tempRewire.pumpIndexToAddress(index))
                saveProgramOnPumpStub.args[0][1].should.eq(program)
                saveProgramOnPumpStub.args[0][2].should.eq(speed)
                var loggerOutput = loggerStub.args[0][0].replace('%s', loggerStub.args[0][1])
                loggerOutput = loggerOutput.replace('%s', loggerStub.args[0][2])
                loggerOutput = loggerOutput.replace('%s', loggerStub.args[0][3])
                loggerOutput = loggerOutput.replace('%s', loggerStub.args[0][4])
                return loggerOutput.should.eq('User request to save pump ' + index + ' (address ' + tempRewire.pumpIndexToAddress(index) + ') to Program ' + program + ' as ' + speed + ' RPM')

            });
        })
        it('sets pump 1 program 5 to 1000 rpm (Should fail)', function() {

            var loggerStub = sandbox.stub().returns()
            var setPumpToRemoteControlStub = sandbox.stub().returns()
            var saveProgramOnPumpStub = sandbox.stub().returns()
            var endPumpCommandStub = sandbox.stub().returns()

            tempRewire.__with__({

                'container': {
                    'settings': {
                        'logApi': true
                    },
                    'pumpController': {
                        'setPumpToRemoteControl': setPumpToRemoteControlStub,
                        'saveProgramOnPump': saveProgramOnPumpStub,
                        'endPumpCommand': endPumpCommandStub
                    }
                },
                'logger': {
                    'verbose': loggerStub,
                    'warn': loggerStub
                }


            })(function() {

                var index = 1
                var program = 5
                var speed = 1000
                tempRewire.pumpCommandSaveSpeed(index, program, speed)
                saveProgramOnPumpStub.callCount.should.eq(0)
                saveProgramOnPumpStub.callCount.should.eq(0)
                saveProgramOnPumpStub.callCount.should.eq(0)
                var loggerOutput = loggerStub.args[0][0].replace('%s', loggerStub.args[0][1])
                loggerOutput = loggerOutput.replace('%s', loggerStub.args[0][2])
                loggerOutput = loggerOutput.replace('%s', loggerStub.args[0][3])
                loggerOutput = loggerOutput.replace('%s', loggerStub.args[0][4])
                return loggerOutput.should.eq('FAIL: User request to save pump ' + index + ' (address ' + tempRewire.pumpIndexToAddress(index) + ') to Program ' + program + ' as ' + speed + ' RPM')

            });

        });
        it('sets pump 55 program 1 to 1000 rpm (Should fail)', function() {

            var loggerStub = sandbox.stub().returns()
            var setPumpToRemoteControlStub = sandbox.stub().returns()
            var saveProgramOnPumpStub = sandbox.stub().returns()
            var endPumpCommandStub = sandbox.stub().returns()

            tempRewire.__with__({

                'container': {
                    'settings': {
                        'logApi': true
                    },
                    'pumpController': {
                        'setPumpToRemoteControl': setPumpToRemoteControlStub,
                        'saveProgramOnPump': saveProgramOnPumpStub,
                        'endPumpCommand': endPumpCommandStub
                    }
                },
                'logger': {
                    'verbose': loggerStub,
                    'warn': loggerStub
                }


            })(function() {

                var index = 55
                var program = 1
                var speed = 1000
                tempRewire.pumpCommandSaveSpeed(index, program, speed)
                saveProgramOnPumpStub.callCount.should.eq(0)
                saveProgramOnPumpStub.callCount.should.eq(0)
                saveProgramOnPumpStub.callCount.should.eq(0)
                /* istanbul ignore next */
                var loggerOutput = loggerStub.args[0][0].replace('%s', loggerStub.args[0][1])
                loggerOutput = loggerOutput.replace('%s', loggerStub.args[0][2])
                loggerOutput = loggerOutput.replace('%s', loggerStub.args[0][3])
                loggerOutput = loggerOutput.replace('%s', loggerStub.args[0][4])
                return loggerOutput.should.eq('FAIL: User request to save pump ' + index + ' (address ' + tempRewire.pumpIndexToAddress(index) + ') to Program ' + program + ' as ' + speed + ' RPM')

            });

        });


        it('sets pump 1 program 1 to 5000 rpm (Should fail)', function() {

            var loggerStub = sandbox.stub().returns()
            var setPumpToRemoteControlStub = sandbox.stub().returns()
            var saveProgramOnPumpStub = sandbox.stub().returns()
            var endPumpCommandStub = sandbox.stub().returns()

            tempRewire.__with__({

                'container': {
                    'settings': {
                        'logApi': true
                    },
                    'pumpController': {
                        'setPumpToRemoteControl': setPumpToRemoteControlStub,
                        'saveProgramOnPump': saveProgramOnPumpStub,
                        'endPumpCommand': endPumpCommandStub
                    }
                },
                'logger': {
                    'verbose': loggerStub,
                    'warn': loggerStub
                }


            })(function() {

                var index = 1
                var program = 1
                var speed = 5000

                tempRewire.pumpCommandSaveSpeed(index, program, speed)
                saveProgramOnPumpStub.callCount.should.eq(0)
                saveProgramOnPumpStub.callCount.should.eq(0)
                saveProgramOnPumpStub.callCount.should.eq(0)
                var loggerOutput = loggerStub.args[0][0].replace('%s', loggerStub.args[0][1])
                loggerOutput = loggerOutput.replace('%s', loggerStub.args[0][2])
                loggerOutput = loggerOutput.replace('%s', loggerStub.args[0][3])
                loggerOutput = loggerOutput.replace('%s', loggerStub.args[0][4])

                return loggerOutput.should.eq('FAIL: Speed provided (' + speed + ') is outside of tolerances.')

            });

        });

    })


    /*
                        describe('#runs a pump program (no duration)', function() {
                            context('runs a specific program', function() {
                                it('sets pump 1 to run program 1', function() {
                                    expect(bottle.container.pumpControllerMiddleWare.pumpCommandRunProgram(1, 1)).to.be.true;
                                });
                                it('sets pump 2 to run program 1', function() {
                                    expect(bottle.container.pumpControllerMiddleWare.pumpCommandRunProgram(2, 1)).to.be.true;
                                });
                                it('sets pump 1 to run program 5', function() {
                                    expect(bottle.container.pumpControllerMiddleWare.pumpCommandRunProgram(1, 5)).to.be.false;
                                });
                                it('sets pump 23 to run program 1', function() {
                                    expect(bottle.container.pumpControllerMiddleWare.pumpCommandRunProgram(23, 1)).to.be.false;
                                });
                            })

                        });

                        describe('#runs a pump program with a duration', function() {
                            context('with a function call', function() {
                                it('sets pump 1 to run program 1 for 10 minutes', function() {
                                    expect(bottle.container.pumpControllerMiddleWare.pumpCommandRunProgramForDuration(1, 1, 10)).to.be.true;
                                });
                                it('sets pump 1 to run program 1 for 10 minutes', function() {
                                    expect(bottle.container.pumpControllerMiddleWare.pumpCommandRunProgramForDuration(1, 1, 10)).to.be.true;
                                });
                                it('sets pump 1 to run program 1 for -1 minutes', function() {
                                    expect(bottle.container.pumpControllerMiddleWare.pumpCommandRunProgramForDuration(1, 1, -1)).to.be.false;
                                });
                            })

                        });

                        describe('#saves and runs a pump program with a duration', function() {
                            context('with a function call', function() {
                                it('sets pump 1 to run program 1 for 10 minutes @ 1000 rpm', function() {
                                    expect(bottle.container.pumpControllerMiddleWare.pumpSaveAndRunProgramWithSpeedForDuration(1, 1, 1000, 10)).to.be.true;
                                });
                                it('sets pump 2 to run program 2 for 20 minutes @ 2000 rpm', function() {
                                    expect(bottle.container.pumpControllerMiddleWare.pumpSaveAndRunProgramWithSpeedForDuration(2, 2, 2000, 20)).to.be.true;
                                });
                                it('sets pump 1 to run program 5 for 10 minutes @ 1000 rpm', function() {
                                    expect(bottle.container.pumpControllerMiddleWare.pumpSaveAndRunProgramWithSpeedForDuration(1, 5, 1000, 10)).to.be.false;
                                });
                            })

                        });


                        describe('#controls pump power', function() {
                            context('with a function call', function() {
                                it('sets pump 1 to 1 (on)', function() {
                                    expect(bottle.container.pumpControllerMiddleWare.pumpCommandSetPower(1, 1)).to.be.true;
                                });
                                it('sets pump 1 to "on"', function() {
                                    expect(bottle.container.pumpControllerMiddleWare.pumpCommandSetPower(1, "on")).to.be.false;
                                });
                                it('sets pump 1 to off (0)', function() {
                                    expect(bottle.container.pumpControllerMiddleWare.pumpCommandSetPower(1, 0)).to.be.true;
                                });
                                it('sets pump 2 to 1 (on)', function() {
                                    expect(bottle.container.pumpControllerMiddleWare.pumpCommandSetPower(2, 1)).to.be.true;
                                });
                                it('sets pump 2 to "on"', function() {
                                    expect(bottle.container.pumpControllerMiddleWare.pumpCommandSetPower(2, "on")).to.be.false;
                                });
                                it('sets pump 1 to off (0)', function() {
                                    expect(bottle.container.pumpControllerMiddleWare.pumpCommandSetPower(1, 0)).to.be.true;
                                });
                                it('sets pump 2 to off (0)', function() {
                                    expect(bottle.container.pumpControllerMiddleWare.pumpCommandSetPower(2, 0)).to.be.true;
                                });
                                it('sets pump 45 to off (0)', function() {
                                    expect(bottle.container.pumpControllerMiddleWare.pumpCommandSetPower(45, 0)).to.be.false;
                                });

                            });
    */




});
